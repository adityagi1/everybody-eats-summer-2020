median_home_value +
thiel_racial_segregation_index +
num_housing_units +
life_expectancy,
data = fa_pm_evanston)
summary(mod.evanston.subset3)
mod.evanston.subset4 = lm(food_insecurity_num_2020 ~
median_household_income +
median_age +
social_vulnerability_index +
median_home_value +
thiel_racial_segregation_index +
num_housing_units,
data = fa_pm_evanston)
summary(mod.evanston.subset4)
results %>% rename(X1 = index, X0.592434498243177 = adj-rsq)
names(results)[1] = "variable_index"
names(results)[2] = "adj-rsq"
results
results %>% ggplot() + geom_point(aes(x = variable_index, y = adj_rsq))
#results %>% ggplot() + geom_point(aes(x = variable_index, y = adj_rsq))
plot(results$variable_index, results$`adj-rsq`)
#results %>% ggplot() + geom_point(aes(x = variable_index, y = adj_rsq))
plot(results$variable_index, results$`adj-rsq`, type = 'l')
#results %>% ggplot() + geom_point(aes(x = variable_index, y = adj_rsq))
plot(results$variable_index, results$`adj-rsq`, type = 'o')
library(car)
vif(mod.evanston.subset4)
hist(fa_pm_evanston$food_insecurity_num_2020)
hist(fa_pm_evanston$food_insecurity_num_2018)
hist(log(fa_pm_evanston$food_insecurity_num_2018))
?t.test
#test hypotheses on evanston only data
fa_pm_evanston = read_csv("../Data/Modelling Data/fa_pm_evanston-model.csv")
library(tidyverse)
library(ggplot2)
?read.csv
?read_csv
?read.csv
library(ggplot2)
#test hypotheses on evanston only data
fa_pm_evanston = read_csv("../Data/Modelling Data/fa_pm_evanston-model.csv")
fa_pm_evanston$food_insecurity_num_2018
type(fa_pm_evanston$food_insecurity_num_2018)
typeof(fa_pm_evanston$food_insecurity_num_2018)
View(fa_pm_evanston)
#top 5 rows
fa_pm_evanston %>% arrange(desc(food_insecurity_rate_2018))
#top 5 rows
fa_pm_evanston %>% arrange(desc(food_insecurity_rate_2018)) %>% View()
?arragen
?arrange
#top 5 rows
fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018)) %>% View()
#top 5 rows
fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018))%>% head(5)
#top 5 rows
fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018))%>% head(5) %>% View()
fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018)) %>% tail(5) %>% View()
bottom_n = fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018)) %>% tail(5) %>% View()
#top 5 rows
top_n = fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018))%>% head(5)
bottom_n = fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018)) %>% tail(5)
hist(fa_pm_evanston$total_population)
hist(fa_pm_evanston$food_insecurity_num_2018)
hist(log(fa_pm_evanston$food_insecurity_num_2018))
?t.test
#let's conduct a t-test on the avg. household size
t.test(top_n, bottom_n, alternative = 'two.sided')
#let's conduct a t-test on the avg. household size
t.test(top_n$avg_household_size, bottom_n$avg_household_size, alternative = 'two.sided')
#let's conduct a t-test on the avg. household size
t.test(top_n$avg_household_size, bottom_n$avg_household_size,
alternative = 'greater')
#let's conduct a t-test on the avg. household size
t.test(top_n$avg_household_size, bottom_n$avg_household_size,
alternative = 'less')
var_list
size(var_list)
n(var_list)
length(var_list)
knitr::opts_chunk$set(echo = TRUE)
top_n %>% head()
fa_pm_evanston %>% head()
top_n$local_census_tract %>% head()
bottom_n$local_census_tract
print("Most food insecure tracts: ",top_n$local_census_tract)
print("Most food insecure tracts: " + top_n$local_census_tract)
?print
fa_pm_evanston %>% ggplot() + geom_hist(aes(x = food_insecurity_num_2018))
fa_pm_evanston %>% ggplot() + geom_histogram(aes(x = food_insecurity_num_2018))
fa_pm_evanston %>% ggplot() + geom_histogram(aes(x = food_insecurity_num_2018))
?geom_histogram
fa_pm_evanston %>% ggplot() + geom_histogram(aes(food_insecurity_num_2018))
#fa_pm_evanston %>% ggplot() + geom_histogram(aes(food_insecurity_num_2018))
hist(fa_pm_evanston$food_insecurity_num_2018)
fa_pm_evanston %>% ggplot() + geom_histogram(aes(food_insecurity_num_2018))
length(var_list)
names(fa_pm_evanston) - var_list
names(fa_pm_evanston)
var_list
fa_pm_evanston %>% ggplot() + geom_histogram(aes(food_insecurity_num_2018), binwidth = 20)
fa_pm_evanston %>% ggplot() + geom_histogram(aes(food_insecurity_num_2018), binwidth = 10)
fa_pm_evanston %>% ggplot() + geom_histogram(aes(food_insecurity_num_2018), binwidth = 40)
top_n$median_household_income
mean(top_n$median_household_income)
mean(bottom_n$median_household_income)
mean(top_n$median_household_income)
mean(bottom_n$median_household_income)
mean(top_n$median_household_income) - mean(bottom_n$median_household_income)
print(mean(top_n$median_household_income) - mean(bottom_n$median_household_income))
for (i in length(var_list)) {
var = var_list[i]
top_n_mean = mean(top_n$var)
bottom_n_mean = mead(bottom_n$var)
paste("Difference in", var, ":", top_n_mean - bottom_n_mean)
}
var_list = c( 'median_household_income',
'median_age', 'social_vulnerability_index',
'median_home_loan_amount', 'median_home_value', 'prop_nonwhite',
'prop_nonenglish_speaking', 'proportion_hispanic',
'thiel_racial_segregation_index', 'proportion_bachelors_degree',
'computer_access', 'prop_families_poverty', 'num_jobs',
'num_housing_units', 'life_expectancy', 'avg_travel_time_to_work',
'prop_students_in_public_school', 'median_leverage_ratio',
'proportion_disabled', 'avg_household_size', 'prop_men',
'local_census_tract', 'unemployment_change')
for (i in length(var_list)) {
var = var_list[i]
top_n_mean = mean(top_n$var)
bottom_n_mean = mean(bottom_n$var)
paste("Difference in", var, ":", top_n_mean - bottom_n_mean)
}
var_list[2]
top_n$var_list[2]
v = var_list[2]
top_n$v
var_list$v
names[i]
names(top_n)[0]
names(top_n)[1]
names(top_n)[2]
top_n$names(top_n)[2]
top_n$(names(top_n)[2])
for (i in length(var_list)) {
var = var_list[i]
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
paste("Difference in", var)
}
for (i in length(var_list)) {
var = var_list[i]
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
paste("Difference in", var)
}
for (i in length(var_list)) {
var = var_list[i]
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
paste("Difference in", var)
}
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
paste("Difference in", var)
for (i in length(var_list)) {
var = var_list[i]
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
paste("Difference in", var)
}
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
paste("Difference in", var)
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
print("Difference in", var)
for (i in length(var_list)) {
var = var_list[i]
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
print("Difference in")
}
for (var in var_list) {
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
print("Difference in")
}
for (var in var_list) {
top_n_mean = mean(top_n$var)
bottom_n_mean = mean(bottom_n$var)
paste("Difference in:", var, (top_n_mean - bottom_n_mean))
}
for (var in var_list) {
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
paste("Difference in:", var)
}
for (var in var_list) {
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
print("Difference in:", var)
}
for (var in var_list) {
#top_n_mean = mean(top_n$var)
#bottom_n_mean = mean(bottom_n$var)
print("Difference in:")
}
for (var in var_list) {
top_n_mean = mean(top_n$var)
bottom_n_mean = mean(bottom_n$var)
print(top_n_mean - bottom_n_mean)
}
for (var in var_list) {
paste(var)
}
for (var in var_list) {
paste0(var)
}
for (var in var_list) {
print(var)
}
for (var in var_list) {
print(fa_pm$var)
}
for (var in var_list) {
mean(top_n[[var]])
}
for (var in var_list) {
print(mean(top_n[[var]]))
}
for (var in var_list) {
print(var)
top_n_mean = mean(top_n[[var]])
bottom_n_mean = mean(bottom_n[[var]])
print(top_n_mean - bottom_n_mean)
print("------")
}
for (var in var_list) {
print(var)
top_n_mean = mean(top_n[[var]])
bottom_n_mean = mean(bottom_n[[var]])
diff = top_n_mean - bottom_n_mean
print(paste("top_n_mean:", top_n_mean))
print(paste("bottom_n_mean:", bottom_n_mean))
print(paste("diff:", top_n_mean - bottom_n_mean))
print("------")
}
for (var in var_list) {
print(var)
top_n_mean = mean(top_n[[var]])
bottom_n_mean = mean(bottom_n[[var]])
diff = top_n_mean - bottom_n_mean
print(paste("top_n_mean:", top_n_mean))
print(paste("bottom_n_mean:", bottom_n_mean))
print(paste("diff:", top_n_mean - bottom_n_mean))
print("------")
}
var_list = c( 'median_household_income',
'median_age', 'social_vulnerability_index',
'median_home_loan_amount', 'median_home_value', 'prop_nonwhite',
'prop_nonenglish_speaking', 'proportion_hispanic',
'thiel_racial_segregation_index', 'proportion_bachelors_degree',
'computer_access', 'prop_families_poverty', 'num_jobs',
'num_housing_units', 'life_expectancy', 'avg_travel_time_to_work',
'prop_students_in_public_school', 'median_leverage_ratio',
'proportion_disabled', 'avg_household_size', 'prop_men')
for (var in var_list) {
print(var)
top_n_mean = mean(top_n[[var]])
bottom_n_mean = mean(bottom_n[[var]])
diff = top_n_mean - bottom_n_mean
print(paste("top_n_mean:", top_n_mean))
print(paste("bottom_n_mean:", bottom_n_mean))
print(paste("diff:", top_n_mean - bottom_n_mean))
print("------")
}
t.test(top_n$total_population, bottom_n$total_population, alternative = "two.sided")
t.test(top_n$total_population, bottom_n$total_population, alternative = "greater")
t.test(top_n$total_population, bottom_n$total_population, alternative = "less")
t.test(top_n$median_household_income, bottom_n$median_household_income, alternative = "two.sided")
t.test(top_n$median_household_income,bottom_n$median_household_income,
alternative = "less")
t.test(top_n$median_age, bottom_n$median_age, alternative = "two.sided")
t.test(top_n$median_age, bottom_n$median_age, alternative = "less")
t.test(top_n$social_vulnerability_index, bottom_n$social_vulnerability_index, alternative = 'greater')
t.test(top_n$median_home_loan_amount, bottom_n$median_home_loan_amount, alternative = 'greater')
t.test(top_n$median_home_loan_amount, bottom_n$median_home_loan_amount, alternative = 'less')
t.test(top_n$median_home_value, bottom_n$median_home_value, alternative = 'less')
t.test(top_n$prop_nonwhite, bottom_n$prop_nonwhite, alternative = 'less')
t.test(top_n$prop_nonwhite, bottom_n$prop_nonwhite, alternative = 'greater')
t.test(top_n$prop_nonwhite, bottom_n$prop_nonwhite, alternative = 'greater')
t.test(top_n$prop_nonenglish_speaking, bottom_n$prop_nonenglish_speaking, alternative = 'less')
t.test(top_n$prop_nonenglish_speaking, bottom_n$prop_nonenglish_speaking, alternative = 'greater')
t.test(top_n$proportion_hispanic, bottom_n$proportion_hispanic, alternative = 'less')
t.test(top_n$proportion_hispanic, bottom_n$proportion_hispanic, alternative = 'greater')
t.test(top_n$thiel_racial_segregation_index, bottom_n$thiel_racial_segregation, alternative = 'less')
t.test(top_n$thiel_racial_segregation_index, bottom_n$thiel_racial_segregation_index, alternative = 'less')
t.test(top_n$proportion_bachelors_degree, bottom_n$proportion_bachelors_degree, alternative = 'less')
t.test(top_n$computer_accesse, bottom_n$computer_access, alternative = 'less')
t.test(top_n$computer_access, bottom_n$computer_access, alternative = 'less')
t.test(top_n$median_home_value, bottom_n$median_home_value, alternative = 'less')
t.test(top_n$prop_families_poverty, bottom_n$prop_families_poverty, alternative = 'less')
t.test(top_n$prop_families_poverty, bottom_n$prop_families_poverty, alternative = 'greater')
t.test(top_n$num_jobs, bottom_n$num_jobs, alternative = 'less')
t.test(top_n$num_jobs, bottom_n$num_jobs, alternative = 'greater')
t.test(top_n$num_housing_units, bottom_n$num_housing_units, alternative = 'less')
t.test(top_n$num_housing_units, bottom_n$num_housing_units, alternative = 'greater')
t.test(top_n$life_expectancy, bottom_n$life_expectancy, alternative = 'less')
t.test(top_n$avg_travel_time_to_work, bottom_n$avg_travel_time_to_work, alternative = 'less')
t.test(top_n$prop_students_in_public_school, bottom_n$prop_students_in_public_school, alternative = 'less')
t.test(top_n$prop_students_in_public_school, bottom_n$prop_students_in_public_school, alternative = 'two.sided')
t.test(top_n$median_leverage_ratio, bottom_n$median_leverage_ratio, alternative = 'two.sided')
t.test(top_n$median_leverage_ratio, bottom_n$median_leverage_ratio, alternative = 'less')
t.test(top_n$proportion_disabled, bottom_n$proportion_disabled, alternative = 'two.sided')
t.test(top_n$proportion_disabled, bottom_n$proportion_disabled, alternative = 'less')
t.test(top_n$proportion_disabled, bottom_n$proportion_disabled, alternative = 'greater')
t.test(top_n$proportion_disabled, bottom_n$proportion_disabled, alternative = 'two.sided')
t.test(top_n$avg_household_size, bottom_n$avg_household_size, alternative = 'two.sided')
t.test(top_n$avg_household_size, bottom_n$avg_household_size, alternative = 'less')
t.test(top_n$prop_men, bottom_n$prop_men, alternative = 'two.sided')
t.test(top_n$prop_men, bottom_n$prop_men, alternative = 'less')
print(paste("Most food insecure tracts:",  top_n$local_census_tract))
print(paste("Least food insecure tracts: " + bottom_n$local_census_tract))
print(paste("Most food insecure tracts:",  top_n$local_census_tract))
print(paste("Least food insecure tracts: " + bottom_n$local_census_tract))
print(paste("Least food insecure tracts: " ,bottom_n$local_census_tract))
#top 5 tracts
top_n = fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018))%>% head(5)
print(paste("Most food insecure tracts:",  top_n$local_census_tract))
#bottom 5 tracts
bottom_n = fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018)) %>% tail(5)
print(paste("Least food insecure tracts: " ,bottom_n$local_census_tract))
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
#test hypotheses on evanston only data
fa_pm_evanston = read_csv("../Data/Modelling Data/fa_pm_evanston-model.csv")
fa_pm_evanston %>% head()
#top 5 tracts
top_n = fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018))%>% head(5)
print(paste("Most food insecure tracts:",  top_n$local_census_tract))
#top 5 tracts
top_n = fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018))%>% head(5)
print(paste("Most food insecure tracts:",  top_n$local_census_tract))
```{r}
#bottom 5 tracts
bottom_n = fa_pm_evanston %>% arrange(desc(food_insecurity_num_2018)) %>% tail(5)
print(paste("Least food insecure tracts: " ,bottom_n$local_census_tract))
fa_pm_evanston %>% ggplot() + geom_histogram(aes(food_insecurity_num_2018), binwidth = 40)
var_list = c( 'median_household_income',
'median_age', 'social_vulnerability_index',
'median_home_loan_amount', 'median_home_value', 'prop_nonwhite',
'prop_nonenglish_speaking', 'proportion_hispanic',
'thiel_racial_segregation_index', 'proportion_bachelors_degree',
'computer_access', 'prop_families_poverty', 'num_jobs',
'num_housing_units', 'life_expectancy', 'avg_travel_time_to_work',
'prop_students_in_public_school', 'median_leverage_ratio',
'proportion_disabled', 'avg_household_size', 'prop_men')
for (var in var_list) {
print(var)
top_n_mean = mean(top_n[[var]])
bottom_n_mean = mean(bottom_n[[var]])
diff = top_n_mean - bottom_n_mean
print(paste("top_n_mean:", top_n_mean))
print(paste("bottom_n_mean:", bottom_n_mean))
print(paste("diff:", top_n_mean - bottom_n_mean))
print("------")
}
t.test(top_n$median_household_income,bottom_n$median_household_income,
alternative = "less")
t.test(top_n$median_age, bottom_n$median_age, alternative = "less")
```{r, echo=False}
fa_pm_evanston %>% ggplot() + geom_histogram(aes(food_insecurity_num_2018), binwidth = 40)
hist(fa_pm_evanston$food_insecurity_num_2018)
hist(log(fa_pm_evanston$food_insecurity_num_2018))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(ggplot2)
##################MODEL WITH THE EVANSTON ONLY NOW############
fa_pm_evanston = read_csv("../Data/Modelling Data/fa_pm_evanston-model.csv")
typeof(fa_pm$food_insecurity_num_2018)
typeof(fa_pm$total_population)
typeof(fa_pm$food_insecurity_num_2018)
typeof(fa_pm$food_insecurity_num_2020)
var_list = c( 'median_household_income',
'median_age', 'social_vulnerability_index',
'median_home_loan_amount', 'median_home_value', 'prop_nonwhite',
'prop_nonenglish_speaking', 'proportion_hispanic',
'thiel_racial_segregation_index', 'proportion_bachelors_degree',
'computer_access', 'prop_families_poverty', 'num_jobs',
'num_housing_units', 'life_expectancy', 'avg_travel_time_to_work',
'prop_students_in_public_school', 'median_leverage_ratio',
'proportion_disabled', 'avg_household_size', 'prop_men',
'local_census_tract', 'unemployment_change')
mod_set = c("food_insecurity_num_2018")
results = data.frame(index = c(), adj_rsq = c())
i = 0
for (var in var_list) {
mod_set = append(mod_set, var)
i = i + 1
lin.mod = lm(log(food_insecurity_num_2018) ~ .,
data = fa_pm_evanston %>% select(mod_set))
adj_rsq = summary(lin.mod)$adj.r.squared
results = rbind(results, list(i, adj_rsq))
}
names(results)[1] = "variable_index"
names(results)[2] = "adj-rsq"
results
#results %>% ggplot() + geom_point(aes(x = variable_index, y = adj_rsq))
plot(results$variable_index, results$`adj-rsq`, type = 'o')
View(results)
vars_list.subset = c( 'median_household_income',
'median_age', 'social_vulnerability_index',
'median_home_loan_amount', 'median_home_value', 'prop_nonwhite',
'prop_nonenglish_speaking', 'proportion_hispanic',
'thiel_racial_segregation_index', 'proportion_bachelors_degree',
'computer_access', 'prop_families_poverty', 'num_jobs',
'num_housing_units', 'life_expectancy', 'food_insecurity_num_2020')
mod.evanston.subset1 = lm(food_insecurity_num_2020 ~.,
data = fa_pm_evanston %>% select(vars_list.subset))
summary(mod.evanston.subset1)
mod.evanston.subset2 = lm(log(food_insecurity_num_2018) ~
median_household_income +
median_age +
social_vulnerability_index +
median_home_loan_amount +
median_home_value +
thiel_racial_segregation_index +
proportion_bachelors_degree  +
computer_access +
num_jobs +
num_housing_units +
life_expectancy,
data = fa_pm_evanston)
summary(mod.evanston.subset2)
vars_list.subset = c( 'median_household_income',
'median_age', 'social_vulnerability_index',
'median_home_loan_amount', 'median_home_value', 'prop_nonwhite',
'prop_nonenglish_speaking', 'proportion_hispanic',
'thiel_racial_segregation_index', 'proportion_bachelors_degree',
'computer_access', 'prop_families_poverty', 'num_jobs',
'num_housing_units', 'life_expectancy', 'food_insecurity_num_2020')
mod.evanston.subset1 = lm(log(food_insecurity_num_2018) ~.,
data = fa_pm_evanston %>% select(vars_list.subset))
vars_list.subset = c( 'median_household_income',
'median_age', 'social_vulnerability_index',
'median_home_loan_amount', 'median_home_value', 'prop_nonwhite',
'prop_nonenglish_speaking', 'proportion_hispanic',
'thiel_racial_segregation_index', 'proportion_bachelors_degree',
'computer_access', 'prop_families_poverty', 'num_jobs',
'num_housing_units', 'life_expectancy', 'food_insecurity_num_2018')
mod.evanston.subset1 = lm(log(food_insecurity_num_2018) ~.,
data = fa_pm_evanston %>% select(vars_list.subset))
summary(mod.evanston.subset1)
mod.evanston.subset2 = lm(log(food_insecurity_num_2018) ~
median_household_income +
median_age +
social_vulnerability_index +
median_home_loan_amount +
proportion_hispanic +
thiel_racial_segregation_index +
proportion_bachelors_degree  +
num_jobs +
life_expectancy,
data = fa_pm_evanston)
summary(mod.evanston.subset2)
mod.evanston.subset3 = lm(log(food_insecurity_num_2018) ~
median_age +
social_vulnerability_index +
proportion_hispanic +
thiel_racial_segregation_index +
proportion_bachelors_degree  +
num_jobs,
data = fa_pm_evanston)
summary(mod.evanston.subset3)
mod.evanston.subset4 = lm(log(food_insecurity_num_2018) ~
median_age +
social_vulnerability_index +
thiel_racial_segregation_index +
proportion_bachelors_degree  +
num_jobs
data = fa_pm_evanston)
mod.evanston.subset4 = lm(log(food_insecurity_num_2018) ~
median_age +
social_vulnerability_index +
thiel_racial_segregation_index +
proportion_bachelors_degree  +
num_jobs,
data = fa_pm_evanston)
summary(mod.evanston.subset4)
mod.evanston.subset4 = lm(log(food_insecurity_num_2018) ~
median_age +
social_vulnerability_index +
thiel_racial_segregation_index,
data = fa_pm_evanston)
summary(mod.evanston.subset4)
vif(mod.evanston.subset4)
library(cars)
library(Cars)
library(car)
vif(mod.evanston.subset4)
---
title: "Evanston Food Insec Model Dev"
author: "Adi Tyagi"
date: "8/18/2020"
output:
html_document:
df_print: paged
---
