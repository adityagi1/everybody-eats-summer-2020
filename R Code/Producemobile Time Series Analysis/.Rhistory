library(tidyverse)
library(readr)
read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx")
library(readxl)
read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx")
pm = read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx")
View(pm)
pm = read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx",
sheet_name = "Sheet1"
)
help("read_excel")
pm = read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx",
sheet = "Sheet1"
)
pm = read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx",
sheet = "Sheet1")
colnames(pm)
pm %>% rename(c("Date" = "date", "In or out distribution" = "in_out",
"How many lbs received" = "amt_food_received",
"Total individuals rececived" = "num_individuals_served",
"What time truck arrived" = "truck_arrival_time",
"How many volunteers" = "num_volunteers",
"Who picked up leftovers" = "leftover_pickup"
"Boxes for pick-up" = "num_boxes_pickup",
"Boxes of waste" = "num_boxes_waste",
"Note" = "note"))
pm %>% rename(c("Date" = "date", "In or out distribution" = "in_out",
"How many lbs received" = "amt_food_received",
"Total individuals rececived" = "num_individuals_served",
"What time truck arrived" = "truck_arrival_time",
"How many volunteers" = "num_volunteers",
"Who picked up leftovers" = "leftover_pickup",
"Boxes for pick-up" = "num_boxes_pickup",
"Boxes of waste" = "num_boxes_waste",
"Note" = "note"))
rename(pm, c("Date" = "date", "In or out distribution" = "in_out",
"How many lbs received" = "amt_food_received",
"Total individuals rececived" = "num_individuals_served",
"What time truck arrived" = "truck_arrival_time",
"How many volunteers" = "num_volunteers",
"Who picked up leftovers" = "leftover_pickup",
"Boxes for pick-up" = "num_boxes_pickup",
"Boxes of waste" = "num_boxes_waste",
"Note" = "note"))
names(pm) = c("Date" = "date", "In or out distribution" = "in_out",
"How many lbs received" = "amt_food_received",
"Total individuals rececived" = "num_individuals_served",
"What time truck arrived" = "truck_arrival_time",
"How many volunteers" = "num_volunteers",
"Who picked up leftovers" = "leftover_pickup",
"Boxes for pick-up" = "num_boxes_pickup",
"Boxes of waste" = "num_boxes_waste",
"Note" = "note")
names(pm)
pm = read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx",
sheet = "Sheet1")
names(pm)
names(pm) = c("date", "in_out", "amt_food_received","num_guests_signed_in"
"num_individuals_served", "truck_arrival_time","num_volunteers",
"leftover_pickup","num_boxes_pickup", "num_boxes_waste","note")
names(pm) = c("date", "in_out", "amt_food_received","num_guests_signed_in",
"num_individuals_served", "truck_arrival_time","num_volunteers",
"leftover_pickup","num_boxes_pickup", "num_boxes_waste","note")
library(lubridate)
#convert truck arrival time to datetime
parse_date_time(pm$truck_arrival_time)
pm$truck_arrival_time
ts(pm$amt_food_received)
amt_food_rec_ts = ts(pm$amt_food_received)
plot(amt_food_rec_ts)
amt_food_rec_ts = ts(pm$amt_food_received)
plot(amt_food_rec_ts)
rm(amt_food_rec_ts)
amt_food_rec.ts = ts(pm$amt_food_received)
plot(amt_food_rec.ts)
num_ind.ts = ts(pm$num_individuals_served)
plot(num_ind.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers)
plot(num_volunteers.ts)
#decompose each ts
decompose(num_ind.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, period = 12)
help(ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, frequency  = 12)
plot(num_volunteers.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, deltat = 1/12)
plot(num_volunteers.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, deltat = 1/12)
plot(num_volunteers.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, frequency = 12)
plot(num_volunteers.ts)
plot(num_ind.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, frequency = 12)
help(ts)
#form num individuals served time series
num_ind.ts = ts(pm$num_individuals_served, frequency = 12)
plot(num_ind.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, frequency = 12)
plot(num_volunteers.ts)
#form food received time series
amt_food_rec.ts = ts(pm$amt_food_received, frequency = 12)
plot(amt_food_rec.ts)
#form num individuals served time series
num_ind.ts = ts(pm$num_individuals_served, frequency = 12)
plot(num_ind.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, frequency = 12)
plot(num_volunteers.ts)
#decompose each ts
decompose(num_ind.ts)
#decompose each ts
num_ind.decomp = decompose(num_ind.ts)
plot(num_ind.decomp)
amt_food_rec.decomp = decompose(amt_food_rec.ts)
plot(amt_food_rec.ts)
amt_food_rec.decomp = decompose(amt_food_rec.ts)
plot(amt_food_rec.decomp)
num_volunteers.decomp = decompose(num_volunteers.ts)
plot(num_ind.ts)
na.remove(num_ind.ts)
help("decompose")
install.packages("imputeTS")
library(imputeTS)
help("imputeTS")
help("na_seadec")
pm = read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx",
sheet = "Sheet1")
#rename column names
names(pm) = c("date", "in_out", "amt_food_received","num_guests_signed_in",
"num_individuals_served", "truck_arrival_time","num_volunteers",
"leftover_pickup","num_boxes_pickup", "num_boxes_waste","note")
#form food received time series
amt_food_rec.ts = ts(pm$amt_food_received, frequency = 12)
plot(amt_food_rec.ts)
#form num individuals served time series (has missing values)
num_ind.ts = ts(pm$num_individuals_served, frequency = 12)
plot(num_ind.ts)
#form the num volunteers time series
num_volunteers.ts = ts(pm$num_volunteers, frequency = 12)
plot(num_volunteers.ts)
#decompose each ts
num_ind.decomp = decompose(num_ind.ts)
plot(num_ind.decomp)
plot(num_ind.decomp)
amt_food_rec.decomp = decompose(amt_food_rec.ts)
#amt_food_rec, num_volunteers has na's that will need to be imputed
na_seadec(amt_food_rec.ts, algorithm = "interpolation")
help("na_seadec")
help("na_interpolation")
#amt_food_rec, num_volunteers has na's that will need to be imputed
amt_food_rec.ts.imp = na_seadec(amt_food_rec.ts, algorithm = "interpolation")
plot(amt_food_rec.ts)
plot(amt_food_rec.ts.imp)
#num_volunteers
num_volunteers.ts.imp = na_seadec(num_volunteers.ts, algorithm = "interpolation")
#num_volunteers
num_volunteers.ts.imp = na_seadec(num_volunteers.ts, algorithm = "interpolation")
plot(num_volunteers.ts.imp)
ggplot_na_imputations(amt_food_rec.ts, amt_food_rec.ts.imp)
ggplot_na_imputations(num_volunteers.ts, num_volunteers.ts.imp)
plot(num_volunteers.ts)
plot(num_volunteers.ts, type = 'b')
#num_individuals can be directly decomposed into seasonanility, trend
num_ind.decomp = decompose(num_ind.ts)
plot(num_ind.decomp)
######Time Series Decomposition
decompose(num_ind.ts)
######Time Series Decomposition
num_ind.decomp = decompose(num_ind.ts, type = "additive")
num_volunteers.decomp = decompose(num_volunteers.ts.imp, type = "additive")
amt_food_rec.decomp = decompose(amt_food_rec.ts.imp, type = "additive")
#visualize decompositions
plot(num_ind.decomp)
plot(num_volunteers.decomp)
plot(amt_food_rec.decomp)
library(tidyverse)
library(readxl)
library(lubridate)
library(imputeTS)
pm = read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx",
sheet = "Sheet1")
#rename column names
names(pm) = c("date", "in_out", "amt_food_received","num_guests_signed_in",
"num_individuals_served", "truck_arrival_time","num_volunteers",
"leftover_pickup","num_boxes_pickup", "num_boxes_waste","note")
#form food received time series (has missing values)
amt_food_rec.ts = ts(pm$amt_food_received, frequency = 12)
plot(amt_food_rec.ts)
#form num individuals served time series (no missing values)
num_ind.ts = ts(pm$num_individuals_served, frequency = 12)
plot(num_ind.ts)
#form the num volunteers time series (has missing values)
num_volunteers.ts = ts(pm$num_volunteers, frequency = 12)
plot(num_volunteers.ts)
#num_individuals can be directly decomposed into seasonanility, trend
num_ind.decomp = decompose(num_ind.ts)
plot(num_ind.decomp)
#amt_food_rec, num_volunteers has na's that will need to be imputed
amt_food_rec.ts.imp = na_seadec(amt_food_rec.ts, algorithm = "interpolation")
plot(amt_food_rec.ts.imp)
ggplot_na_imputations(amt_food_rec.ts, amt_food_rec.ts.imp)
#num_volunteers
num_volunteers.ts.imp = na_seadec(num_volunteers.ts, algorithm = "interpolation")
ggplot_na_imputations(num_volunteers.ts, num_volunteers.ts.imp)
######Time Series Decomposition
num_ind.decomp = decompose(num_ind.ts, type = "additive")
num_volunteers.decomp = decompose(num_volunteers.ts.imp, type = "additive")
amt_food_rec.decomp = decompose(amt_food_rec.ts.imp, type = "additive")
#visualize decompositions
plot(num_ind.decomp)
plot(num_volunteers.decomp)
plot(amt_food_rec.decomp)
acf(num_ind.ts)
#num_individuals can be directly decomposed into seasonanility, trend
num_ind.decomp = decompose(num_ind.ts)
plot(num_ind.decomp)
acf(num_ind.ts)
acf(amt_food_rec.ts.imp)
acf(amt_food_rec.ts.imp)
#amt_food_rec, num_volunteers has na's that will need to be imputed
num_ind.ts.imp = na_seadec(num_ind.ts, algorithm = "interpolation")
plot(num_ind.ts.imp)
ggplot_na_imputations(num_ind.ts, num_ind.ts.imp)
#####Autocorrelation plots to check seasonality
acf(num_ind.ts.imp, lag.max = 20)
#####Autocorrelation plots to check seasonality
acf(num_ind.ts.imp, lag.max = 20)
acf(num_volunteers.ts.imp, lag.max = 20)
#####Autocorrelation plots to check seasonality
acf(num_ind.ts.imp, lag.max = 20)
help(acf)
#####Autocorrelation plots to check seasonality
acf(num_ind.ts.imp, lag.max = 20, type = "correlation")
#form food received time series (has missing values)
amt_food_rec.ts = ts(pm$amt_food_received)
acf(amt_food_rec.ts.imp, lag.max = 20)
#amount food received
amt_food_rec.ts.imp = na_seadec(amt_food_rec.ts, algorithm = "interpolation")
#form food received time series (has missing values)
amt_food_rec.ts = ts(pm$amt_food_received, frequency = 12)
plot(amt_food_rec.ts)
#form num individuals served time series (has missing values)
num_ind.ts = ts(pm$num_individuals_served, frequency = 12)
plot(num_ind.ts)
#form the num volunteers time series (has missing values)
num_volunteers.ts = ts(pm$num_volunteers, frequency = 12)
plot(num_volunteers.ts)
#num_ind, amt_food_rec, num_volunteers have na's that will need to be imputed
num_ind.ts.imp = na_seadec(num_ind.ts, algorithm = "interpolation")
plot(num_ind.ts.imp)
ggplot_na_imputations(num_ind.ts, num_ind.ts.imp)
#####Autocorrelation plots to check seasonality
acf(num_ind.ts.imp, lag.max = 20, type = "correlation")
acf(num_volunteers.ts.imp, lag.max = 3)
#####Autocorrelation plots to check seasonality
acf(num_ind.ts.imp)
acf(amt_food_rec.ts.imp)
acf(num_volunteers.ts.imp)
acf(amt_food_rec.ts.imp)
acf(num_volunteers.ts.imp)
#####Autocorrelation plots to check seasonality
acf(num_ind.ts.imp)
help("filter")
#####Autocorrelation plots to check seasonality
acf(filter(num_ind.ts.imp, method = "convolution")
#####Autocorrelation plots to check seasonality
acf(filter(num_ind.ts.imp, method = "convolution"))
#####Autocorrelation plots to check seasonality
acf(filter(num_ind.ts.imp, method = "convolution"))
#####Autocorrelation plots to check seasonality
acf(filter(num_ind.ts, method = "convolution"))
#####Autocorrelation plots to check seasonality
filter(num_ind.ts, method = "convolution", sides = 2)
#####Autocorrelation plots to check seasonality
filter(num_ind.ts.imp, method = "convolution", sides = 2)
#####Autocorrelation plots to check seasonality
stats::filter(num_ind.ts.imp, method = "convolution", sides = 2)
stats::filter(amt_food_rec.ts.imp, sides = 2, method = 'convolution')
#####Autocorrelation plots to check seasonality
acf(filter(num_ind.ts.imp, filter = rep(1/12, 12) method = "convolution"))
#####Autocorrelation plots to check seasonality
acf(filter(num_ind.ts.imp, filter = rep(1/12, 12), method = "convolution"))
#####Autocorrelation plots to check seasonality
acf(stats::filter(num_ind.ts.imp, filter = rep(1/12, 12), method = "convolution"))
#num_ind, amt_food_rec, num_volunteers have na's that will need to be imputed
num_ind.ts.imp = na_seadec(num_ind.ts, algorithm = "interpolation")
plot(num_ind.ts.imp)
ggplot_na_imputations(num_ind.ts, num_ind.ts.imp)
#####Autocorrelation plots to check seasonality
acf(stats::filter(num_ind.ts.imp, filter = rep(1/12, 12), method = "convolution"))
#####Autocorrelation plots to check seasonality
acf(num_ind.ts.imp)
help(ma)
ma(num_ind.ts)
library(forecast)
ma(num_ind.ts)
ma(num_ind.ts, order = 12)
ma(num_ind.ts, order = 1/12)
ma(num_ind.ts, order = 2)
plot(ma(num_ind.ts, order = 2))
plot(ma(num_ind.ts, order = 1))
plot(ma(num_ind.ts, order = 2))
plot(ma(num_ind.ts, order = 2, center = True))
plot(ma(num_ind.ts, order = 2, centre = True))
plot(ma(num_ind.ts, order = 2, centre = TRUE))
plot(num_ind.ts - ma(num_ind.ts, order = 2, centre = TRUE))
rep(1/12, 12)
#####Autocorrelation plots to check seasonality
num_ind.ts.ma = ma(num_ind.ts.imp, order = 12)
amt_food.ts.ma = ma(amt_food_rec.ts.imp, order = 12)
num_volunteers.ts.ma = ma(num_volunteers.ts.imp, order = 12)
#now compute the autocorr function of the de-trended data
acf(num_ind.decomp - num_ind.ts.ma)
#now compute the autocorr function of the de-trended data
acf(num_ind.imp - num_ind.ts.ma)
#now compute the autocorr function of the de-trended data
acf(num_ind.ts.imp - num_ind.ts.ma)
#use smoothed data (using ma) as a preliminary estimate of the trend
num_ind.ts.ma = ma(num_ind.ts.imp, order = 12, centre = TRUE)
amt_food.ts.ma = ma(amt_food_rec.ts.imp, order = 12, centre = TRUE)
num_volunteers.ts.ma = ma(num_volunteers.ts.imp, order = 12, centre = TRUE)
#now compute the autocorr function of the de-trended data
acf(num_ind.ts.imp - num_ind.ts.ma)
#now compute the autocorr function of the de-trended data
acf(num_ind.ts.imp - num_ind.ts.ma)
plot(num_ind.ts - ma(num_ind.ts, order = 2, centre = TRUE))
plot(num_ind.ts - ma(num_ind.ts, order = 2, centre = FALSE))
#now compute the autocorr function of the de-trended data
acf(na.remove(num_ind.ts.imp - num_ind.ts.ma))
#now compute the autocorr function of the de-trended data
acf(na.remove(num_ind.ts.imp - num_ind.ts.ma))
#now compute the autocorr function of the de-trended data
acf(na_remove(num_ind.ts.imp - num_ind.ts.ma))
#now compute the autocorr function of the de-trended data
acf(na_remove(num_ind.ts.imp - num_ind.ts.ma))
acf(na_remove(amt_food_rec.ts.imp - amt_food.ts.ma))
acf(na_remove(num_volunteers.ts.imp - num_volunteers.ts.ma))
######MODELLING
HoltWinters(num_ind.ts.imp, seasonal = "additive")
######MODELLING
num_ind.hw.mod = HoltWinters(num_ind.ts.imp, seasonal = "additive")
amt_food_rec.hw.mod = HoltWinters(amt_food_rec.ts.imp, seasonal = "additive")
num_volunteers.hw.mod = HoltWinters(num_volunteers.ts.imp, seasonal = "additive")
num_ind.hw.mod
num_ind.hw.mod
amt_food_rec.hw.mod
amt_food_rec.hw.mod = HoltWinters(amt_food_rec.ts.imp, seasonal = "additive")
######MODELLING
num_ind.hw.mod = HoltWinters(num_ind.ts.imp, seasonal = "additive")
amt_food_rec.hw.mod = HoltWinters(amt_food_rec.ts.imp, seasonal = "additive")
num_volunteers.hw.mod = HoltWinters(num_volunteers.ts.imp, seasonal = "additive")
pm = read_excel("../../Data/ProduceMobile/Producemobile_historical_data_clean.xlsx",
sheet = "Sheet1")
#rename column names
names(pm) = c("date", "in_out", "amt_food_received","num_guests_signed_in",
"num_individuals_served", "truck_arrival_time","num_volunteers",
"leftover_pickup","num_boxes_pickup", "num_boxes_waste","note")
#form food received time series (has missing values)
amt_food_rec.ts = ts(pm$amt_food_received, frequency = 12)
plot(amt_food_rec.ts)
#form num individuals served time series (has missing values)
num_ind.ts = ts(pm$num_individuals_served, frequency = 12)
plot(num_ind.ts)
#form the num volunteers time series (has missing values)
num_volunteers.ts = ts(pm$num_volunteers, frequency = 12)
plot(num_volunteers.ts)
#num_ind, amt_food_rec, num_volunteers have na's that will need to be imputed
num_ind.ts.imp = na_seadec(num_ind.ts, algorithm = "interpolation")
plot(num_ind.ts.imp)
ggplot_na_imputations(num_ind.ts, num_ind.ts.imp)
#amount food received
amt_food_rec.ts.imp = na_seadec(amt_food_rec.ts, algorithm = "interpolation")
plot(amt_food_rec.ts.imp)
ggplot_na_imputations(amt_food_rec.ts, amt_food_rec.ts.imp)
#num_volunteers
num_volunteers.ts.imp = na_seadec(num_volunteers.ts, algorithm = "interpolation")
ggplot_na_imputations(num_volunteers.ts, num_volunteers.ts.imp)
#visualize decompositions
plot(num_ind.decomp)
plot(num_volunteers.decomp)
plot(amt_food_rec.decomp)
######MODELLING
num_ind.hw.mod = HoltWinters(num_ind.ts.imp, seasonal = "additive")
amt_food_rec.hw.mod = HoltWinters(amt_food_rec.ts.imp, seasonal = "additive")
num_volunteers.hw.mod = HoltWinters(num_volunteers.ts.imp, seasonal = "additive")
# let's look at summaries for the model
summary(num_ind.hw.mod)
# let's look at summaries for the model
num_ind.hw.mod
amt_food_rec.hw.mod
num_volunteers.hw.mod
# let's look at summaries for the model
num_ind.hw.mod
amt_food_rec.hw.mod
num_volunteers.hw.mod
predict(num_ind.hw.mod, n.ahead = 4)
predict(num_ind.hw.mod, n.ahead = 5)
predict(num_ind.hw.mod, n.ahead = 6)
num_ind.hw.pred = predict(num_ind.hw.mod, n.ahead = 6)
amt_food_rec.hw.pred = predict(amt_food_rec.hw.mod, n.ahead = 6)
num_volunteers.hw.pred = predict(num_volunteers.hw.mod, n.ahead = 6)
num_ind.hw.pred
amt_food_rec.hw.pred
num_volunteers.hw.pred
num_ind.hw.pred = predict(num_ind.hw.mod, n.ahead = 6, prediction.interval = TRUE)
num_ind.hw.pred
num_ind.hw.pred = predict(num_ind.hw.mod, n.ahead = 6, prediction.interval = TRUE)
amt_food_rec.hw.pred = predict(amt_food_rec.hw.mod, n.ahead = 6, prediction.interval = TRUE)
num_volunteers.hw.pred = predict(num_volunteers.hw.mod, n.ahead = 6, prediction.interval = TRUE)
##plot predictions
plot(num_ind.hw.pred)
plot(y.hw, type = 'b')
##plot predictions
plot(num_ind.ts.imp, num_ind.hw.pred)
##plot predictions
plot(num_ind.ts.imp, num_ind.hw.pred, type = 'b')
##plot predictions
plot(num_ind.ts.imp)#, num_ind.hw.pred, type = 'b')
##plot predictions
plot(num_ind.ts.imp, num_ind.hw.pred, type = 'b')
##plot predictions
plot(num_ind.ts.imp)
lines(num_ind.hw.pred, color = 'red')
##plot predictions
plot(num_ind.ts.imp)
lines(num_ind.ts.ma, color = 'red')
plot.forecast(num_ind.hw.pred)
##plot predictions
plot(num_ind.hw.mod, num_ind.hw.pred, type = 'b')
##plot predictions
plot(num_ind.hw.mod, num_ind.hw.pred, type = 'b', title = "haha")
##plot predictions
plot(num_ind.hw.mod, num_ind.hw.pred, type = 'b', main = "haha")
##plot predictions
plot(num_ind.hw.mod, num_ind.hw.pred, type = 'b', main = "Forecasted Num. Individuals Arriving Till December 2020")
plot(amt_food_rec.hw.mod, amt_food_rec.hw.pred, type = 'b', main = "Forecasted Num. Individuals Arriving Till December 2020")
plot(num_volunteers.hw.mod, num_volunteers.hw.pred, type = 'b', main = "Forecasted Num. Volunteers Till December 2020")
##plot predictions
plot(num_ind.hw.mod, num_ind.hw.pred, type = 'b', main = "Forecasted Num. Individuals Arriving Till December 2020")
plot(amt_food_rec.hw.mod, amt_food_rec.hw.pred, type = 'b', main = "Forecasted Amt. Food Arriving Till December 2020")
plot(num_volunteers.hw.mod, num_volunteers.hw.pred, type = 'b', main = "Forecasted Num. Volunteers Till December 2020")
##plot predictions
plot(num_ind.hw.mod, num_ind.hw.pred, type = 'b', main = "Forecasted Num. Individuals Arriving Till December 2020")
plot(amt_food_rec.hw.mod, amt_food_rec.hw.pred, type = 'b', main = "Forecasted Amt. Food Arriving Till December 2020")
plot(num_volunteers.hw.mod, num_volunteers.hw.pred, type = 'b', main = "Forecasted Num. Volunteers Till December 2020")
##plot predictions
plot(num_ind.hw.mod, num_ind.hw.pred, type = 'b', main = "Forecasted Num. Individuals Arriving Till December 2020")
plot(amt_food_rec.hw.mod, amt_food_rec.hw.pred, type = 'b', main = "Forecasted Amt. Food Arriving Till December 2020")
plot(num_volunteers.hw.mod, num_volunteers.hw.pred, type = 'b', main = "Forecasted Num. Volunteers Till December 2020")
#visualize decompositions
plot(num_ind.decomp)
#visualize decompositions
plot(num_ind.decomp, main = "Num. Individuals Decomposition")
#visualize decompositions
plot(num_ind.decomp)#, main = "Num. Individuals Decomposition")
#visualize decompositions
plot(num_ind.decomp, title = "hha")#, main = "Num. Individuals Decomposition")
help("plot.decomposed.ts")
#visualize decompositions
plot(num_ind.decomp), main = "hha")#, main = "Num. Individuals Decomposition")
#visualize decompositions
plot(num_ind.decomp, main = "hha")#, main = "Num. Individuals Decomposition")
#visualize decompositions
plot(num_ind.decomp, title = "hha")#, main = "Num. Individuals Decomposition")
warnings()
#visualize decompositions
plot(num_ind.decomp, main = "hha")#, main = "Num. Individuals Decomposition")
help("plot.ts")
#visualize decompositions
plot(num_ind.decomp)#, main = "Num. Individuals Decomposition")
plot(amt_food_rec.decomp, main = "Amount food received Decomposition")
plot(amt_food_rec.decomp)# main = "Amount food received Decomposition")
plot(num_volunteers.decomp) #main = "Num. Volunteers Attending Decomposition")
#visualize decompositions
plot(num_ind.decomp)#, main = "Num. Individuals Decomposition")
######Time Series Decomposition
num_ind.decomp = decompose(num_ind.ts.imp, type = "additive")
#visualize decompositions
plot(num_ind.decomp)#, main = "Num. Individuals Decomposition")
knitr::opts_chunk$set(echo = TRUE)
head(pm)
#use smoothed data (using ma) as a preliminary estimate of the trend
num_ind.ts.ma = stats::ma(num_ind.ts.imp, order = 12, centre = TRUE)
#use smoothed data (using ma) as a preliminary estimate of the trend
num_ind.ts.ma = ma(num_ind.ts.imp, order = 12, centre = TRUE)
